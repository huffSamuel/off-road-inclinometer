// Mocks generated by Mockito 5.1.0 from annotations
// in off_road_inclinometer/test/presentation/home/home_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:off_road_inclinometer/application/inclination/inclinometer.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeStreamController_0<T> extends _i1.Fake
    implements _i2.StreamController<T> {}

/// A class which mocks [Inclinometer].
///
/// See the documentation for Mockito's code generation for more information.
class MockInclinometer extends _i1.Mock implements _i3.Inclinometer {
  MockInclinometer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get zero =>
      (super.noSuchMethod(Invocation.getter(#zero), returnValue: false)
          as bool);
  @override
  set zero(bool? _zero) => super.noSuchMethod(Invocation.setter(#zero, _zero),
      returnValueForMissingStub: null);
  @override
  _i2.StreamController<double> get pitch =>
      (super.noSuchMethod(Invocation.getter(#pitch),
              returnValue: _FakeStreamController_0<double>())
          as _i2.StreamController<double>);
  @override
  set pitch(_i2.StreamController<double>? _pitch) =>
      super.noSuchMethod(Invocation.setter(#pitch, _pitch),
          returnValueForMissingStub: null);
  @override
  _i2.StreamController<double> get roll =>
      (super.noSuchMethod(Invocation.getter(#roll),
              returnValue: _FakeStreamController_0<double>())
          as _i2.StreamController<double>);
  @override
  set roll(_i2.StreamController<double>? _roll) =>
      super.noSuchMethod(Invocation.setter(#roll, _roll),
          returnValueForMissingStub: null);
}
