// Mocks generated by Mockito 5.1.0 from annotations
// in off_road_inclinometer/test/presentation/home/settings_button_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:fluro/fluro.dart' as _i2;
import 'package:flutter/cupertino.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeRouteMatch_0 extends _i1.Fake implements _i2.RouteMatch {}

/// A class which mocks [FluroRouter].
///
/// See the documentation for Mockito's code generation for more information.
class MockFluroRouter extends _i1.Mock implements _i2.FluroRouter {
  MockFluroRouter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set notFoundHandler(_i2.Handler? _notFoundHandler) =>
      super.noSuchMethod(Invocation.setter(#notFoundHandler, _notFoundHandler),
          returnValueForMissingStub: null);
  @override
  void define(String? routePath,
          {_i2.Handler? handler,
          _i2.TransitionType? transitionType,
          Duration? transitionDuration = const Duration(milliseconds: 250),
          _i3.RouteTransitionsBuilder? transitionBuilder}) =>
      super.noSuchMethod(
          Invocation.method(#define, [
            routePath
          ], {
            #handler: handler,
            #transitionType: transitionType,
            #transitionDuration: transitionDuration,
            #transitionBuilder: transitionBuilder
          }),
          returnValueForMissingStub: null);
  @override
  _i2.AppRouteMatch? match(String? path) =>
      (super.noSuchMethod(Invocation.method(#match, [path]))
          as _i2.AppRouteMatch?);
  @override
  void pop<T>(_i3.BuildContext? context, [T? result]) =>
      super.noSuchMethod(Invocation.method(#pop, [context, result]),
          returnValueForMissingStub: null);
  @override
  _i4.Future<dynamic> navigateTo(_i3.BuildContext? context, String? path,
          {bool? replace = false,
          bool? clearStack = false,
          bool? maintainState = true,
          bool? rootNavigator = false,
          _i2.TransitionType? transition,
          Duration? transitionDuration,
          _i3.RouteTransitionsBuilder? transitionBuilder,
          _i3.RouteSettings? routeSettings}) =>
      (super.noSuchMethod(
          Invocation.method(#navigateTo, [
            context,
            path
          ], {
            #replace: replace,
            #clearStack: clearStack,
            #maintainState: maintainState,
            #rootNavigator: rootNavigator,
            #transition: transition,
            #transitionDuration: transitionDuration,
            #transitionBuilder: transitionBuilder,
            #routeSettings: routeSettings
          }),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i2.RouteMatch matchRoute(_i3.BuildContext? buildContext, String? path,
          {_i3.RouteSettings? routeSettings,
          _i2.TransitionType? transitionType,
          Duration? transitionDuration,
          _i3.RouteTransitionsBuilder? transitionsBuilder,
          bool? maintainState = true}) =>
      (super.noSuchMethod(
          Invocation.method(#matchRoute, [
            buildContext,
            path
          ], {
            #routeSettings: routeSettings,
            #transitionType: transitionType,
            #transitionDuration: transitionDuration,
            #transitionsBuilder: transitionsBuilder,
            #maintainState: maintainState
          }),
          returnValue: _FakeRouteMatch_0()) as _i2.RouteMatch);
  @override
  _i3.Route<dynamic>? generator(_i3.RouteSettings? routeSettings) =>
      (super.noSuchMethod(Invocation.method(#generator, [routeSettings]))
          as _i3.Route<dynamic>?);
  @override
  void printTree() => super.noSuchMethod(Invocation.method(#printTree, []),
      returnValueForMissingStub: null);
}
